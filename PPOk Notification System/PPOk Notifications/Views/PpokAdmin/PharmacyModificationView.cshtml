@model Tuple< PPOk_Notifications.Models.Pharmacy, PPOk_Notifications.Models.Pharmacist>

@{
    ViewBag.Title = "PharmacyModificationView";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <h2>Modify Pharmacy</h2>

        <div class="form-group" style="display: none;">
            @Html.LabelFor(model => model.Item1.PharmacyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.PharmacyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item1.PharmacyName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.PharmacyAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.PharmacyAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item1.PharmacyAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.PharmacyPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.PharmacyPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item1.PharmacyPhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <h2>Modify Admin</h2>

        <div class="form-group">
            @Html.LabelFor(model => model.Item2.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item2.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item2.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item2.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item2.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item2.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item2.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item2.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item2.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="submit" class="btn btn-default" onclick="submitModifications()" />
            </div>
        </div>
    </div>
}

<script>
            @functions{
                public string TokenHeaderValue()
                {
                    string cookieToken, formToken;
                    AntiForgery.GetTokens(null, out cookieToken, out formToken);
                    return cookieToken + ":" + formToken;
                }
            }
    function submitModifications() {
        form = "form";
        action = $(form).attr("action");
        dataToSend = $(form).serialize();
        $.ajax({
            type: "POST",
            dataType: "html",
            url: action,
            headers: {
                'RequestVerificationToken': '@TokenHeaderValue()'
            },
            data: dataToSend,
            success: function (data) {
                listBadges();
            }
        });
    }
</script>
